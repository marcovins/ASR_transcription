# main.py
from utils.transcription import transcribe_with_diarization
from utils.imports import asyncio, logging
from utils.audio import extract_audio

async def main():
    """
    Fun√ß√£o principal que realiza o processo completo de extra√ß√£o de √°udio, transcri√ß√£o e diariza√ß√£o de um v√≠deo.

    Passos realizados:
    1. Extrai o √°udio de um v√≠deo MP4 especificado no diret√≥rio `resources/` usando a fun√ß√£o `extract_audio`.
    2. Caso a extra√ß√£o do √°udio seja bem-sucedida, realiza a transcri√ß√£o do √°udio usando o m√©todo `transcribe_with_diarization`, que inclui a identifica√ß√£o dos falantes.
    3. Para cada segmento de √°udio transcrito, gera uma representa√ß√£o textual que inclui:
       - O identificador do falante.
       - O texto transcrito.
       - O tempo de in√≠cio e fim do segmento (em minutos).
       - Um separador visual entre os segmentos.
    4. A transcri√ß√£o √© salva em um arquivo de texto (`transcription_{video_name}.txt`) no diret√≥rio `resources/`.
    
    Exce√ß√µes tratadas:
    - Se o √°udio n√£o for extra√≠do com sucesso, um erro √© registrado.
    - Se a transcri√ß√£o falhar ou n√£o gerar resultados, um erro √© registrado.
    - Caso haja problemas ao salvar o arquivo de transcri√ß√£o, o erro √© capturado e registrado.

    Requisitos:
    - Fun√ß√µes auxiliares como `extract_audio` e `transcribe_with_diarization` devem estar corretamente implementadas e dispon√≠veis no m√≥dulo `Utils.utils`.
    - O arquivo de v√≠deo (`{video_name}.mp4`) deve estar presente no diret√≥rio `resources/`.

    Par√¢metros:
    Nenhum. A fun√ß√£o opera com um nome de v√≠deo hardcoded (`discussao_senado`).

    Retorna:
    Nenhum. A fun√ß√£o realiza opera√ß√µes ass√≠ncronas de extra√ß√£o, transcri√ß√£o e salvamento de dados.
    """
    video_name = "Como divulgar as informa√ß√µes geradas pelo observat√≥rio_190424"
    logging.info("Iniciando extra√ß√£o de √°udio...")

    audio_file = await extract_audio(f"resources/{video_name}.mp4")

    if audio_file:
        logging.info("√Åudio extra√≠do com sucesso! Iniciando transcri√ß√£o...")
        result = await transcribe_with_diarization(audio_file)

        if result:
            logging.info("Transcri√ß√£o conclu√≠da. Escrevendo segmentos...")
            transcription = ""
            for sentence in result['segments']:
                start_min = sentence["start"] / 60
                end_min = sentence["end"] / 60
                transcription += "\n".join([f"üîâ Falante: {sentence['speaker']}",
                                            f"üìÑ Frase: {sentence['text']}",
                                            f"‚è≥ In√≠cio: {start_min:.2f} min",
                                            f"‚è≥ Fim: {end_min:.2f} min",
                                            "-" * 40]) + "\n"
            try:
                with open(f"resources/transcription_{video_name}.txt", "w", encoding="utf-8") as arq:
                    arq.write(transcription)
                logging.info("Arquivo de transcri√ß√£o salvo com sucesso!")
            except Exception as e:
                logging.error(f"Erro ao salvar arquivo: {e}")
        else:
            logging.error("‚ùå Falha na transcri√ß√£o. N√£o foi poss√≠vel obter resultados.")
    else:
        logging.error("‚ùå Falha na extra√ß√£o do √°udio. Arquivo de √°udio n√£o encontrado.")

asyncio.run(main())
