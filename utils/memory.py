# utils/memory.py
from utils.imports import gc, torch, logging, Optional, os, shutil

async def clean_memory(device: str, model: Optional[object] = None) -> None:
    """
    Limpa a mem√≥ria do sistema, remove modelos carregados e apaga arquivos da pasta temp.

    A fun√ß√£o realiza a coleta de lixo para liberar mem√≥ria no sistema e, caso a execu√ß√£o esteja em um dispositivo CUDA 
    (GPU), tamb√©m limpa a mem√≥ria da GPU. Al√©m disso, se um modelo for fornecido, ele ser√° removido da mem√≥ria. 
    Tamb√©m apaga todos os arquivos da pasta tempor√°ria `temp`.

    Par√¢metros:
        device (str): O dispositivo em que o modelo est√° sendo executado, podendo ser "cpu" ou "cuda".
        model (object, opcional): O modelo carregado que deve ser removido da mem√≥ria. O valor padr√£o √© None.

    Retorno:
        None: N√£o retorna nenhum valor. A fun√ß√£o apenas executa a√ß√µes de limpeza na mem√≥ria.

    Observa√ß√µes:
        - O par√¢metro `device` deve ser "cpu" ou "cuda". Se for "cuda", a fun√ß√£o tentar√° limpar a mem√≥ria da GPU.
        - A fun√ß√£o deve ser chamada ap√≥s a execu√ß√£o de tarefas de transcri√ß√£o ou alinhamento para garantir que a mem√≥ria seja liberada adequadamente.

    Exemplo:
        await clean_memory("cuda", model)
        # Libera mem√≥ria na GPU, remove o modelo e apaga arquivos da pasta temp.

    Poss√≠veis erros:
        - N√£o h√° erros previstos, mas √© importante garantir que a vari√°vel `model` seja v√°lida antes de remov√™-la da mem√≥ria.

    """
    gc.collect()

    if device == "cuda" and torch.cuda.is_available():
        torch.cuda.empty_cache()
        torch.cuda.synchronize()
        logging.info("üöÄ Mem√≥ria da GPU limpa!")

    if model:  # S√≥ deleta o modelo se ele foi carregado
        del model
        logging.info("üßπ Modelo removido da mem√≥ria.")

    # Apagar arquivos da pasta temp
    temp_dir = "temp"  # Diret√≥rio tempor√°rio onde os arquivos ser√£o apagados

    try:
        if os.path.exists(temp_dir):
            # Itera sobre os arquivos na pasta e apaga cada um
            for filename in os.listdir(temp_dir):
                file_path = os.path.join(temp_dir, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    logging.info(f"üóëÔ∏è Arquivo removido: {file_path}")
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
                    logging.info(f"üóëÔ∏è Pasta removida: {file_path}")
            logging.info("üßπ Arquivos da pasta 'temp' apagados com sucesso!")
        else:
            logging.warning(f"A pasta '{temp_dir}' n√£o foi encontrada.")
    except Exception as e:
        logging.error(f"Erro ao limpar a pasta 'temp': {e}")
