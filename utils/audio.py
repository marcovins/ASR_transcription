# utils/audio.py
from utils.imports import Optional, os, VideoFileClip, AudioSegment, logging, BASE_PATH


async def extract_audio(path: str) -> Optional[str]:
    """
    Extrai o √°udio de um arquivo de v√≠deo (MP4) e o converte para o formato WAV.
    A fun√ß√£o recebe o caminho para um arquivo de v√≠deo MP4, extrai o √°udio, converte-o para o formato WAV,
    e salva o arquivo processado em um diret√≥rio predefinido. Se houver algum erro durante o processo, 
    um log ser√° gerado e a fun√ß√£o retornar√° `None`.

    Par√¢metros:
        path (str): O caminho para o arquivo de v√≠deo MP4 do qual o √°udio ser√° extra√≠do.

    Retorno:
        Optional[str]: Retorna o caminho do arquivo de √°udio processado em formato WAV se a extra√ß√£o for bem-sucedida.
        Caso contr√°rio, retorna `None` em caso de erro.

    Exemplo:
        audio_path = await extract_audio("video.mp4")
        if audio_path:
            print(f"√Åudio extra√≠do e salvo em: {audio_path}")
        else:
            print("Erro na extra√ß√£o do √°udio.")
    
    Observa√ß√µes:
        O arquivo de √°udio extra√≠do ser√° salvo como `processed_audio.wav` no diret√≥rio especificado por `BASE_PATH`.
        Caso n√£o exista o arquivo no caminho fornecido, a fun√ß√£o retorna `None` e gera um log de erro.
    """
    if not os.path.exists(path):
        logging.error(f"Arquivo {path} n√£o encontrado")
        return None

    try:
        clip = VideoFileClip(path)
        clip.audio.write_audiofile(f"{BASE_PATH}audio.mp3")
        sound = AudioSegment.from_mp3(f"{BASE_PATH}audio.mp3")
        sound = sound.set_channels(1).set_frame_rate(16000)
        output_path = f"{BASE_PATH}processed_audio.wav"
        sound.export(output_path, format="wav")
        logging.info("üéôÔ∏è √Åudio extra√≠do com sucesso")
        return output_path
    except Exception as e:
        logging.error(f"Erro na extra√ß√£o de √°udio: {e}")
        return None
    